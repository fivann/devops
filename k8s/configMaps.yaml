# 1. ConfigMaps in Kubernetes
# What is a ConfigMap in Kubernetes?
# A ConfigMap is a dictionary of configuration settings. This dictionary consists of key-value pairs of strings. Kubernetes provides these values to your containers. Like with other dictionaries (maps, hashes, …) the key lets you get and set the configuration value.

apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5    
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true 
    
# Use a ConfigMap to keep your application code separate from your configuration.

# It is an important part of creating a Twelve-Factor Application.
# This lets you change easily configuration depending on the environment (development, production, testing) and to dynamically change configuration at runtime.

# What is ConfigMap used for?
# A ConfigMap stores configuration settings for your code. Store connection strings, public credentials, hostnames, and URLs in your ConfigMap.

# https://youtu.be/ZatNT_oSlyc

# Documentation
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
# https://unofficial-kubernetes.readthedocs.io/en/latest/tasks/configure-pod-container/configmap/
# https://itnext.io/learn-how-to-configure-your-kubernetes-apps-using-the-configmap-object-d8f30f99abeb
# https://medium.com/google-cloud/kubernetes-configmaps-and-secrets-68d061f7ab5b

# 2. ConfigMaps

# Useful commands:
# $ kubectl get configmap
# $ kubectl get cm
# $ kubectl describe configmap
# $ kubectl describe cm

# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/


# 3. Creating ConfigMaps from File(s)
# Howto:
# Using CLI:
# $ kubectl create configmap --help

# Create a configmap based on a file, directory, or specified literal value.

#  A single configmap may package one or more key/value pairs.

#  When creating a configmap based on a file, the key will default to the basename of the file, and
# the value will default to the file content.  If the basename is an invalid key, you may specify an
# alternate key.

#  ...

# Aliases:
# configmap, cm

# Examples:
#   # Create a new configmap named my-config based on folder bar
#   kubectl create configmap my-config --from-file=path/to/bar  
#   # Create a new configmap named my-config with specified keys instead of file basenames on disk
#   kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt
#   ...
#   # Create a new configmap named my-config from the key=value pairs in the file
#   kubectl create configmap my-config --from-file=path/to/bar
#   ...
  
# Using Definition File:

apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-name
data:
  data_file: |
    file content with indention
      
# Task:
# Create configMap object with key=value pairs from the file /data/data_file
# ConfigMap name: os-config
# namespace: default
#  Note that:
# os-config has only one key = the name of the file (data_file) and the value is the content of this file

# solution 1:
$ kubectl create configmap os-config --from-file=/data/data_file -n default

# solution 2:
apiVersion: v1
kind: ConfigMap
metadata:
  name: os-config
  namespace: default
data:
  data_file: |
    IP=172.31.0.5
    NAME="CentOS Linux"
    VERSION="7 (Core)"
    VERSION_ID="7"
    
# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

########################################################################################################################

# 4. Creating ConfigMaps from Literals

# Howto:
# Using CLI:
# $ kubectl create cm --help
# Create a configmap based on a file, directory, or specified literal value.

#  A single configmap may package one or more key/value pairs.
#  ...
# Aliases:
# configmap, cm
# Examples:
#   ...
#   # Create a new configmap named my-config with key1=config1 and key2=config2
#   kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
#   ...
  
# Using Definition File:

apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-name
data:
  key1: value1
  key2: value2
  ...
  
# Task:
# Create a simple ConfigMap with the following requirements:

# ConfigMap name: users-cm
# namespace: default
# data field:
# field cluster-admin: admin
# field devops: devops
# field db-admin: db-admin
# field user1: Kenneth Meyer
# field user2: Nereida Waller
# field user3: Ivan Fedorov2

apiVersion: v1
kind: ConfigMap
metadata:
  name: users-cm
  namespace: default
data:
  cluster-admin: admin
  devops: devops
  db-admin: db-admin
  user1: Kenneth Meyer
  user2: Nereida Waller
  user3: Ivan Fedorov2

# Verify:
# $ kubectl get cm users-cm -o yaml
# apiVersion: v1
# data:
#   cluster-admin: admin
# ...
# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

########################################################################################################

# 5. Using ConfigMaps Keys as Environment Variables
# Separate keys from ConfigMaps can be injected into Pod environment using this instructions:

...
spec:
  containers:
  - name: container-name
    env:
    - name: ENV_VARIABLE_NAME
      valueFrom:
        configMapKeyRef:
          name: configmap-name
          key: configmap-key
    ...
...

# Task:
# Create a simple pod with the name user-pod which get only user1 and user2 fields from users-cm as environment variable with names USER1 and USER2 correspondingly:

# Requirements
#   Namespace: default
#   Pod name: user-pod
#   Image: busybox:1.34
#   Comand: sleep 4800
#   Pod should have env variable USER1 with value from user1 field of users-cm ConfigMap
#   Pod should have env variable USER2 with value from user2 field of users-cm ConfigMap
#   Other values shouldn’t be in env variables of user-pod

apiVersion: v1
kind: Pod
metadata:
  name: user-pod
  namespace: default
spec:
  containers:
  - name: user-pod
    image: busybox:1.34
    command: ["sleep", "4800"]
    envFrom:
    - configMapRef:
        name: users-cm
    env:
    - name: USER1
      valueFrom:
        configMapKeyRef:
          name: users-cm
          key: user1
    - name: USER2
      valueFrom:
        configMapKeyRef:
          name: users-cm
          key: user2

# Verify:
# $ kubectl exec -it user-pod -- printenv USER1
# Kenneth Meyer

# $ kubectl exec -it user-pod -- printenv USER2
# Nereida Waller

# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

############################################################################################################

# 6. Using ALL Keys as Pod’s Environment Variables
# You can also add all keys into Pod’s environment:

...
spec:
  containers:
  - name: container-name
    envFrom:
    - configMapRef:
        name: configmap-name
...

# Task:
# Create a simple pod with the name team-pod which gets all fields from users-cm ConfigMap as environment variables.
# Requirements
#   Namespace: default
#   Pod name: team-pod
#   Image: busybox:1.34
#   Command: sleep 4800
#   Pod should have env variables from all users-cm ConfigMap fields

apiVersion: v1
kind: Pod
metadata:
  name: team-pod
  namespace: default
spec:
  containers:
  - name: team-pod
    image: busybox:1.34
    command: ["sleep", "4800"]
    envFrom:
    - configMapRef:
        name: users-cm

# Verify:
# $ kubectl exec -it team-pod -- env
# ...
# user1=Kristina Linder
# user2=Misty Marquez
# user3=Siarhei Beliakou
# cluster-admin=admin
# db-admin=db-admin
# devops=devops
# ...

# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

#######################################################################################################################

# 7. Using ConfigMap Keys as Files
# Use following configuration:

spec:
  containers:
    - name: container-name
      ...
      volumeMounts:
      - name: volume-name
        mountPath: /folder/inside/container
  volumes:
    - name: volume-name
      configMap:
        name: configmap-name
...

# Task:
# Create a simple pod with name team-volume-pod which will use users-cm ConfigMap as volume.
# Requirements:
#   Namespace: default
#   Pod name: team-volume-pod
#   Image: busybox:1.34
#   Command: sleep 3600
#   Pod should use users-cm ConfigMap as attached volume
#   Volume name: team-volume
#   MountPath: /data/team-members

apiVersion: v1
kind: Pod
metadata:
  name: team-volume-pod
  namespace: default
spec:
  containers:
  - name: team-volume-pod
    image: busybox:1.34
    command: ["sleep", "3600"]
    volumeMounts:
    - name: team-volume
      mountPath: /data/team-members
  volumes:
    - name: team-volume
      configMap:
        name: users-cm

# Verify:
# $ kubectl exec team-volume-pod -- ls /data/team-members
# cluster-admin
# db-admin
# devops
# user1
# user2
# user3

# $ kubectl exec team-volume-pod -- cat /data/team-members/user3
# Ivan Fedorov2

# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/

########################################################################################################

# Final Notes

# Working with configMaps

# Creating ConfigMap from File(s):

# $ cat configmap/game.properties
# enemies=aliens
# enemies.cheat.level=noGoodRotten
# lives=3

# $ cat configmap/ui.properties
# color.good=purple
# color.bad=yellow
# allow.textmode=true

# $ kubectl create configmap game-config --from-file=configmap/

# $ kubectl get cm game-config -o yaml

apiVersion: v1
data:
  game.properties: |
    enemies=aliens
    enemies.cheat.level=noGoodRotten
    lives=3
  ui.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
kind: ConfigMap
metadata:
  ...

$ kubectl get cm game-config -o jsonpath='{.data.game\.properties}'
enemies=aliens
enemies.cheat.level=noGoodRotten
lives=3
Creating ConfigMap from Literal:
$ kubectl create cm palitra --from-literal=RED="#FF0000" --from-literal=GREEN="#00FF00"
configmap/palitra created

$ kubectl get cm palitra -o yaml
apiVersion: v1
data:
  GREEN: '#00FF00'
  RED: '#FF0000'
kind: ConfigMap
metadata:
  ...

$ kubectl get cm palitra -o jsonpath='{.data.RED}'
#FF0000
Using ConfigMaps in Pods
apiVersion: v1
kind: Pod
metadata:
  name: cm-test-pod
spec:
  restartPolicy: Never
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: 
      - "/bin/sh"
      - "-c"
      - |
        env
        ls -la /etc/config/
        echo /etc/config/game.properties
        cat /etc/config/game.properties
        cat /opt/config/ui.properties
        cat /opt/config/ui.properties
      
      # Define the environment variable
      env:
        - name: RED_COLOR
          valueFrom:
            configMapKeyRef:
              # The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY
              name: palitra
              # Specify the key associated with the value
              key: RED

      # Define all of the ConfigMap’s data as container environment variables
      envFrom:
      - configMapRef:
          name: palitra

      # Mounting Volume inside Container
      volumeMounts:
      - name: config-volume-all-from-game-config
        mountPath: /etc/config
    
      - name: config-volume-ui-properties
        mountPath: /opt/config

  # Add ConfigMap data to a Volume, Mounting Volume inside POD
  volumes:
    # All data from Config Map
    - name: config-volume-all-from-game-config
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: game-config
    
    # Specific data item form Config Map
    - name: config-volume-ui-properties
      configMap:
        name: game-config
        items:
        - key: ui.properties
          path: ui.properties


