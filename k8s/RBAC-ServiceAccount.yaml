# Kubernetes Service Accounts

# All Kubernetes clusters have two categories of users:
# service accounts (managed by Kubernetes)
# normal users (managed by an outside)
# Normal users are assumed to be managed by an outside, independent service. 
# An admin distributing private keys, a user store like Keystone or Google Accounts, even a file with a list of usernames and passwords. 
# In this regard, Kubernetes does not have objects which represent normal user accounts. 
# Normal users cannot be added to a cluster through an API call.

# In contrast, service accounts are users managed by the Kubernetes API. 
# They are bound to specific namespaces, and created automatically by the API server or manually through API calls. 
# Service accounts are tied to a set of credentials stored as Secrets, 
# which are mounted into pods allowing in-cluster processes to talk to the Kubernetes API.

# API requests are tied to either a normal user or a service account, or are treated as anonymous requests. 
# This means every process inside or outside the cluster, from a human user typing kubectl on a workstation, 
# to kubelets on nodes, to members of the control plane, must authenticate when making requests to the API server, 
# or be treated as an anonymous user.

# In this LAB we are going to get familiar with the process of authenticating with “serviceAccount”, 
# sorting out the mess with their privileges and troubleshooting fine grained levels of their access.

################################################################################################################################################

# 1. ServiceAccount Admission Controller

# The modification of pods is implemented via a plugin called an Admission Controller. It is a part of the API server. It acts synchronously to modify pods as they are created or updated. When this plugin is active (and it is by default on most distributions), then it does the following when a pod is created or modified:

# If the pod does not have a ServiceAccount set, it sets the ServiceAccount to default.
# It ensures that the ServiceAccount referenced by the pod exists, and otherwise rejects it.
# If the pod does not contain any ImagePullSecrets, then ImagePullSecrets of the ServiceAccount are added to the pod.
# It adds a volume to the pod which contains a token for API access.
# It adds a volumeSource to each container of the pod mounted at /var/run/secrets/kubernetes.io/serviceaccount.

# Let’s inspect our ServiceAccounts:

# $ kubectl get sa
# NAME                     SECRETS   AGE
# default                  1         83s
# custom-service-account   1         3s

# $ kubectl describe sa custom-service-account 

# Documentation:
# https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/


################################################################################################################################################

# 2. Using ServiceAccount for Pulling Images from Private Docker Registry

# How to:
# First of all, obviously, we shall create a Secret with our credentials:

kubectl create secret docker-registry registry-cred \
 --docker-server=my.private-registry.com \
 --docker-username=ifedorov2 \
 --docker-password="myVeryStronPassword" \
 --docker-email=ifedorov2@mycompany.com \
 --namespace my-namespace
 
Or this way if you have .dockerconfigjson file:

kubectl create secret generic registry-cred \
  --from-file=.dockerconfigjson=<path/to/.docker/config.json> \
  --type=kubernetes.io/dockerconfigjson
How does pod know what credentials to use for pulling image?

Next, you can specify following in your pod/deployment manifest:

apiVersion: v1
kind: Pod
spec:
  containers:
    - name: ...
      image: ...
  imagePullSecrets:
    - name: registry-cred
    
# But what’s wrong with this approach?

# At least following:
# You should always specify imagePullSecrets, which becomes a nightmare in case of rotating passwords
# Developers shall be aware of this secret and this looks like “overcomplecated” solution
# Better approach:
# To add imagePullSecrets into the default ServiceAccount:

kubectl patch serviceaccount default -n my-namespace \
  --patch '{
    "imagePullSecrets": [
      {
        "name": "registry-cred"
      }
    ]
  }'
  
# In this case the following will be added to Pod definition automatically:

  imagePullSecrets:
    - name: registry-cred
Task:
Please do the following:

# Create “docker credentials” secret:

# Name: docker-private-registry
# Docker Server: registry.gitlab.com
# Docker Username: ifedorov2
# Docker Password: wd5on2vpPADY5o6X6dMD
# Docker Email: ifedorov2@mycompany.com

# $ kubectl create secret docker-registry docker-private-registry --docker-server=registry.gitlab.com --docker-username=ifedorov2 --docker-password=wd5on2vpPADY5o6X6dMD --docker-email=ifedorov2@mycompany.com


# Create a ServiceAccount:
# Name: private-registry
# imagePullSecrets: docker-private-registry

# $ kubectl create serviceaccount private-registry
# $ kubectl patch serviceaccount private-registry -p '{"imagePullSecrets":[{"name":"docker-private-registry"}]}'

# Create a pod corporate-app:
# Namespace: default
# Image: registry.gitlab.com/playpit-labs/images/blackbox:v3.3
# ServiceAccount: private-registry
# ServiceAccountName: private-registry

apiVersion: v1
kind: Pod
metadata:
  name: corporate-app
  namespace: default
spec:
  containers:
  - name: corporate-app
    image: registry.gitlab.com/playpit-labs/images/blackbox:v3.3
  serviceAccountName: private-registry



# Verify:
# Checking secret and its type:

# $ kubectl get secret
# NAME                                 TYPE                                  DATA   AGE
# default-token-kwf9j                  kubernetes.io/service-account-token   3      29m
# custom-service-account-token-mrpb2   kubernetes.io/service-account-token   3      25m
# docker-private-registry              kubernetes.io/dockerconfigjson        1      1m33s
# private-registry-token-ftxqj         kubernetes.io/service-account-token   3      1m29s
# Checking Pod events:
# $ kubectl describe po corporate-app | sed -n '/^Events:/,/^$/p'
# Events:
#   Type    Reason     Age    From               Message
#   ----    ------     ----   ----               -------
#   Normal  Scheduled  2m28s  default-scheduler  Successfully assigned default/corporate-app to node02
#   Normal  Pulling    2m28s  kubelet            Pulling image "registry.gitlab.com/playpit-labs/images/blackbox:v3.3"
#   Normal  Pulled     2m22s  kubelet            Successfully pulled image "registry.gitlab.com/playpit-labs/images/blackbox:v3.3" in 6s
#   Normal  Created    2m21s  kubelet            Created container corporate-app
#   Normal  Started    2m21s  kubelet            Started container corporate-app

# Documentation:
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# https://docs.openshift.com/container-platform/4.1/openshift_images/managing_images/using-image-pull-secrets.html

################################################################################################################################################


3. Troubleshooting Case

A new application has been deployed into fftx-dd-qa namespace.

kubectl get po -n fftx-dd-qa
NAME                         READY   STATUS             RESTARTS   AGE
color-box-7b8bf47999-nhtxz   0/1     ImagePullBackOff   0          28s
color-box-7b8bf47999-4tqww   0/1     ImagePullBackOff   0          28s
color-box-7b8bf47999-mcpt9   0/1     ImagePullBackOff   0          28s
color-box-7b8bf47999-nw8fd   0/1     ImagePullBackOff   0          28s
color-box-7b8bf47999-5kl2s   0/1     ImagePullBackOff   0          28s
Task:
Please troubleshoot and fix it.

 Do not change deployment

Verify:
kubectl get pods -n  fftx-dd-qa
NAME                         READY   STATUS    RESTARTS   AGE
color-box-7f98c778b7-rk6kp   1/1     Running   0          93s
color-box-7f98c778b7-8xgnm   1/1     Running   0          93s
color-box-7f98c778b7-mj2zx   1/1     Running   0          93s
color-box-7f98c778b7-zgmpr   1/1     Running   0          82s
color-box-7f98c778b7-fcvhr   1/1     Running   0          81s




################################################################################################################################################

4. Role-Based Access Control

The main idea behind Role-Based Access Control is to provide access to resources to those users who require and deny access to resources from users who doesn’t require it.



https://youtu.be/G3R24JSlGjY
Role
Role in Kubernetes Role-Based Access Control defines a notion of a verb like get or list and a set of nouns like pod, volumes etc. So, a role defines what you can do to a set of resources. It contains a set of rules which define a set of permission.

Here’s an example Role in the “default” namespace that can be used to grant read access to pods:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
ClusterRole
Roles are used to assigning resources for a namespace, but if you need to assign resources on a cluster level, you need to use ClusterRole. It is similar to Roles, but it can grant permissions that are cluster-scoped such as giving resource permissions across all namespaces in the cluster.

Here is an example of a ClusterRole:

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deployer
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]

- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]

- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
RoleBinding
RoleBinding is used for granting permission to a Subject in a Kubernetes cluster. Subjects are nothing but a set of users, services or groups trying to access Kubernetes API. It defines what operations a user, service or group can perform. It provides privileges within the context of a particular namespace.

Here is an example of a RoleBinding that grants the “pod-reader” Role to the user “jane” within the “default” namespace. This allows “jane” to read pods in the “default” namespace.

apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: jane # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
ClusterRoleBinding
ClusterRoleBinding is used to grant permission to a subject on a cluster-level in all the namespaces.

It can provide you with permissions for cluster resources and it can also provide you with permissions for resources within any namespace within a cluster. Obviously clusterRoleBindings are very powerful and you want to be careful with how you apply them because they apply not only to any existing namespaces but to any future namespaces that you might create as well.

The following ClusterRoleBinding allows any user in the group “manager” to read secrets in any namespace.

apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: read-secrets-global
subjects:
- kind: Group
  name: manager # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
Documentation:
https://medium.com/@danielckv/what-is-rbac-in-kubernetes-c54457eff2dc
https://kubernetes.io/blog/2017/04/rbac-support-in-kubernetes/


################################################################################################################################################

# 5. ServiceAccount Permissions

# Theory:
# Default RBAC policies grant scoped permissions to control-plane components, nodes, and controllers, but grant no permissions to service accounts outside the kube-system namespace (beyond discovery permissions given to all authenticated users).

# It allows you to grant particular roles to particular ServiceAccounts as needed. Fine-grained role bindings provide greater security, but require more effort to administrate. Broader grants can give unnecessary (and potentially escalating) API access to ServiceAccounts, but are easier to administrate.

# In order from most secure to least secure, the approaches are:
#   Grant a role to an application-specific service account (best practice)
#   Grant a role to the “default” service account in a namespace
#   Grant a role to all service accounts in a namespace
#   Grant a limited role to all service accounts cluster-wide (discouraged)
#   Grant super-user access to all service accounts cluster-wide (strongly discouraged)

# Examples of Manifests:
# ServiceAccount

apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-name
  namespace: default
  
# Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: role-name
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["watch"]
  
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rolebinding-name
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: role-name
subjects:
- kind: ServiceAccount
  name: sa-name
  namespace: default
  
# Task:
# Create ServiceAccount: ifedorov2-sa
# Create Role: ifedorov2-role, verbs: list, resources: pods
# $ kubectl create serviceaccount ifedorov2-sa
# $ kubectl create role ifedorov2-role --verb=list --resource=pods

# Create RoleBinding: ifedorov2-rolebinding (ifedorov2-role -> ifedorov2-sa)
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ifedorov2-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ifedorov2-role
subjects:
- kind: ServiceAccount
  name: ifedorov2-sa
  namespace: default

# Run a Pod:
# Name: kubectl
# Image: bitnami/kubectl:1.21
# Command: sleep infinity
# ServiceAccount: ifedorov2-sa

# $ kubectl run kubectl --image=bitnami/kubectl:1.21 --command -- sleep infinity --serviceaccount=ifedorov2-sa
# pod/kubectl created

# Verify:
# Come inside kubectl pod and run kubectl get pods command, or like this one:

# $ kubectl exec -it kubectl -- kubectl get pods
# NAME            READY   STATUS    RESTARTS   AGE
# kubectl         1/1     Running   0          67s
# regular-stuff   1/1     Running   0          3h25m

# Documentation:
# https://kubernetes.io/docs/reference/access-authn-authz/rbac/
# https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions
# https://kubernetes.io/docs/reference/access-authn-authz/rbac/#command-line-utilities


################################################################################################################################################

# 7. Adding More Permissions
# Our S/A now can work with Pods, but what about Deployments?

# $ kubectl auth can-i watch deployment --as=system:serviceaccount:default:ifedorov2-sa
# no
# $ kubectl auth can-i list deployment --as=system:serviceaccount:default:ifedorov2-sa
# no
# $ kubectl auth can-i get deployment --as=system:serviceaccount:default:ifedorov2-sa
# no

Task:
Please add necessary permissions to ifedorov2-role

Verify:
Bash script:

sa_name="system:serviceaccount:default:ifedorov2-sa"
for verb in get list watch; do
  echo -n $verb: && kubectl auth can-i $verb deployment --as=${sa_name}
done
Result:

get:yes
list:yes
watch:no

$ kubectl patch role ifedorov2-role -p '{"rules":[{"verbs":["watch","list","get"],"resources":["deployments"]}]}'


kubectl create rolebinding ifedorov2-rolebinding --role=ifedorov2-role --serviceaccount=default:ifedorov2-sa -n default


################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
