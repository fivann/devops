apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-deploy
  template:
    metadata:
      labels:
        app: nginx-deploy
    spec:
      containers:
      - name: nginx
        image: nginx:1.19-alpine
        ports:
        - containerPort: 80


====================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ifedorov2-app
  labels:
    app: ifedorov2-app
    student: ifedorov2
spec:
  replicas: 1
  selector:
    matchLabels:
      deploy: ifedorov2-app
  template:
    metadata:
      labels:
        deploy: ifedorov2-app
        kind: redis
        role: master
        tier: db
    spec:
      containers:
      - name: redis-master
        image: redis:5-alpine
        ports:
        - containerPort: 6379
      initContainers:
      - name: init
        image: busybox:1.34
        command: ["sleep", "10"]

-----------------

SERVICE

apiVersion: v1
kind: Service
metadata:
  name: pod-info-svc
spec:
  type: ClusterIP
  selector:
    app: pod-info-app
  ports:
  - name: http
    port: 80
    targetPort: 80




   9  # kubectl run test --image busybox:1.28 -i --tty --rm -- sh
   10  kubectl run test --image busybox:1.28 -i --tty --rm -- sh
   11  # kubectl run test --image busybox:1.28 -i --tty --rm -- sh
   12  kubectl run test --image busybox:1.28 -i --tty --rm -- sh
   13  $ echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh
   14  echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh
   15  echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh > /root/testing-clusterip-nslookup.log
   16  echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh | tee /root/testing-clusterip-nslookup.log
   17  echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh 
   18  ( echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh )
   19  ( echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh ) > /root/testing-clusterip-nslookup.log
   20  cat /root/testing-clusterip-nslookup.log 
   21  ( echo nslookup pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh ) | tee  /root/testing-clusterip-nslookup.log
   22  cat /root/testing-clusterip-nslookup.log 
   23  ( echo wget -q -O- pod-info-svc | kubectl run test --image busybox:1.27 -i --rm -- sh ) | tee  /root/testing-clusterip-web.log
   24  history

        ===========

HEADLESS


apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: sbeliakou/web-pod-info:v1


apiVersion: v1
kind: Service
metadata:
  name: myapp-headless
spec:
  clusterIP: None
  selector:
    app: myapp
  ports:
  - name: http
    port: 80
    targetPort: 80


apiVersion: v1
kind: Service
metadata:
  name: myapp-clusterip
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
  - name: http
    port: 80
    targetPort: 80
=============


kubectl rollout undo -f test.yaml


EXTERNAL


apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: ExternalName
  externalName: prodb.a1b2c3d4wxyz.eu-west-1.rds.playpit.net


========
 root@client  ~ # kubectl get nodes -o wide

apiVersion: v1
kind: Service
metadata:
  name: my-web-service
spec:
  type: ClusterIP
  selector:
    app: simple-web-app
  ports:
  - name: http
    port: 80
    targetPort: 80
  externalIPs:
  - 172.31.0.2


==========

kubectl create -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: book-shelf-service
  namespace: prod
spec:
  type: LoadBalancer
  selector:
    app: book-shelf
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
EOF


--------------


error: unknown flag: --selector

kubectl create service clusterip aqua-svc --tcp=80:80 --selector='app=aqua'
kubectl create service clusterip maroon-svc --tcp=80:80 --selector='app=maroon'
kubectl create service clusterip olive-svc --tcp=80:80 --selector='app=olive'

kubectl expose deployment nginx --port=80 --target-port=8000 --selector='app=multitool'

------------------


Thereâ€™re aqua, maroon and olive deployments created in default namespace.


kubectl create -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: aqua-svc
spec:
  selector:
    app: aqua
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: maroon-svc
spec:
  selector:
    app: maroon
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: olive-svc
spec:
  selector:
    app: olive
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
EOF

INGRES
Create (3) Ingress Resources which forward incoming traffic to respective pods:


kubectl create -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aqua-ingress
spec:
  rules:
  - host: aqua.k8slab.playpit.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: aqua-svc
            port:
              number: 80
EOF

kubectl create -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: olive-ingress
spec:
  rules:
  - host: olive.k8slab.playpit.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: olive-svc
            port:
              number: 80
EOF

kubectl create -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: maroon-ingress
spec:
  rules:
  - host: maroon.k8slab.playpit.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: maroon-svc
            port:
              number: 80
EOF


=====

Using the services you have created recently, create Ingress Resource assuming that:

Ingress Resource Name: colors-ingress
FQDN: colors.k8slab.playpit.net
Context Paths:
/aqua: implements aqua-svc response
/maroon: implements maroon-svc response
/* (default, any other): implements olive-svc response




kubectl create -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: colors-ingress  
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: colors.k8slab.playpit.net
    http:
      paths:
      - path: /aqua
        pathType: Prefix
        backend:
          service:
            name: aqua-svc
            port:
              number: 80
      - path: /maroon
        pathType: Prefix
        backend:          
          service:
            name: maroon-svc
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: olive-svc
            port:
              number: 80
EOF




=============


APP RED colors

kubectl create -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: red-color
spec:
  replicas: 3
  selector:
    matchLabels:
      app: red-color
  template:
    metadata:
      labels:
        app: red-color
    spec:
      containers:
      - name: red-color
        image: sbeliakou/color:v1
        env:
        - name: COLOR
          value: red
        ports:
        - containerPort: 8080
apiVersion: v1
kind: Service
metadata:
  name: red-svc
spec:
  selector:
    app: red-color
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
EOF


kubectl create -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: red-color
spec:
  replicas: 3
  selector:
    matchLabels:
      app: red-color
  template:
    metadata:
      labels:
        app: red-color
    spec:
      containers:
      - name: red-color
        image: sbeliakou/color:v1
        env:
        - name: COLOR
          value: red
        ports:
        - containerPort: 8080
apiVersion: v1
kind: Service
metadata:
  name: red-svc
spec:
  selector:
    app: red-color
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
EOF


kubectl create -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: green-color
spec:
  replicas: 1
  selector:
    matchLabels:
      app: red-color
  template:
    metadata:
      labels:
        app: red-color
    spec:
      containers:
      - name: green-color
        image: sbeliakou/color:v1
        env:
        - name: COLOR
          value: green
        ports:
        - containerPort: 8080
apiVersion: v1
kind: Service
metadata:
  name: green-svc
spec:
  selector:
    app: red-color
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
EOF


====
kubectl get pods -n ingress-nginx

kubectl exec -it <pod-name> -n ingress-nginx -- /bin/bash

grep -A1 "server_name" /etc/nginx/nginx.conf | grep "proxy_connect_timeout"

=====

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment-hostpath
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-deployment-hostpath
  template:
    metadata:
      labels:
        app: web-deployment-hostpath
    spec:
      containers:
      - name: web-deployment-hostpath
        image: nginx:alpine
        volumeMounts:
        - name: web-deployment-hostpath-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: web-deployment-hostpath-volume
        hostPath:
          path: /host-data
      nodeSelector:
        kubernetes.io/hostname: node01
---
apiVersion: v1
kind: Service
metadata:
  name: web-deployment-hostpath-svc
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 30083
  selector:
    app: web-deployment-hostpath

    
