Here are 5 examples of Dockerfiles that follow best practices:


######################################################################
Node.js Application with npm install
######################################################################

# Set base image
FROM node:14-alpine
# Create working directory
WORKDIR /app
# Copy package.json and package-lock.json files
COPY package*.json ./
# Install dependencies
RUN npm install --production
# Copy application files
COPY . .
# Expose port
EXPOSE 3000
# Start the application
CMD [ "npm", "start" ]

######################################################################
Python Application with pip install
######################################################################

# Set base image
FROM python:3.9-alpine
# Create working directory
WORKDIR /app
# Copy requirements.txt file
COPY requirements.txt .
# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt
# Copy application files
COPY . .
# Expose port
EXPOSE 5000
# Start the application
CMD [ "python", "app.py" ]

######################################################################
Java Application with Maven
######################################################################

# Set base image
FROM maven:3.8.4-openjdk-11-slim
# Create working directory
WORKDIR /app
# Copy pom.xml file
COPY pom.xml .
# Install dependencies
RUN mvn dependency:go-offline
# Copy application files
COPY src ./src
# Build application
RUN mvn package -DskipTests
# Expose port
EXPOSE 8080
# Start the application
CMD [ "java", "-jar", "/app/target/app.jar" ]

######################################################################
NGINX Server
######################################################################

# Set base image
FROM nginx:1.21-alpine
# Remove default configuration file
RUN rm /etc/nginx/conf.d/default.conf
# Copy custom configuration file
COPY nginx.conf /etc/nginx/conf.d/
# Copy web files
COPY index.html /usr/share/nginx/html/
COPY style.css /usr/share/nginx/html/
# Expose port
EXPOSE 80
# Start NGINX server
CMD [ "nginx", "-g", "daemon off;" ]

######################################################################
MySQL Database
######################################################################

# Set base image
FROM mysql:8.0
# Set environment variables
ENV MYSQL_ROOT_PASSWORD=my-secret-pw
ENV MYSQL_DATABASE=mydb
ENV MYSQL_USER=myuser
ENV MYSQL_PASSWORD=mypassword
# Copy initialization script
COPY init.sql /docker-entrypoint-initdb.d/
# Expose port
EXPOSE 3306
# Start MySQL server
CMD [ "mysqld" ]

######################################################################
These Dockerfiles follow best practices by:
######################################################################

Starting with a lightweight base image
Creating a non-root user for running the application
Minimizing the number of layers
Using COPY instead of ADD
Setting environment variables for configuration
Exposing only necessary ports
Removing unnecessary files and dependencies
Specifying the entrypoint command
Using the RUN instruction for installing dependencies and building the application
Following the recommended format for file names and instructions.

######################################################################
Here is an example Dockerfile that creates a Docker image with the same 
Conda environment as MyEnv and runs a Python script runme.py inside the container:
######################################################################

# Base image with Conda pre-installed
FROM continuumio/miniconda3
# Copy the Conda environment YAML file to the container
COPY environment.yml /tmp/
# Create a new Conda environment based on the YAML file
RUN conda env create -f /tmp/environment.yml && \
    conda clean --all --yes
# Set the working directory to /app
WORKDIR /app
# Copy the Python script to the container
COPY runme.py .
# Activate the Conda environment
SHELL ["conda", "run", "-n", "MyEnv", "/bin/bash", "-c"]
# Run the Python script
CMD ["python", "runme.py"]

######################################################################
Here's a breakdown of the Dockerfile:
######################################################################

FROM continuumio/miniconda3: specifies the base image that contains Conda.
COPY environment.yml /tmp/: copies the Conda environment YAML file from the host machine to the container.
RUN conda env create -f /tmp/environment.yml && conda clean --all --yes: 
  creates a new Conda environment inside the container based on the YAML file.
WORKDIR /app: sets the working directory to /app inside the container.
COPY runme.py .: copies the runme.py Python script from the host machine to the container.
SHELL ["conda", "run", "-n", "MyEnv", "/bin/bash", "-c"]: sets the shell 
  for subsequent commands to be executed within the MyEnv Conda environment.
CMD ["python", "runme.py"]: runs the runme.py Python script inside the container.

To build the Docker image, navigate to the directory with the Dockerfile and run:

$ docker build -t myimage .

Replace myimage with the desired name for the Docker image.
Once the build is complete, you can run the Docker container with the command:

$ docker run --rm myimage

This will run the runme.py script inside the container using the same Conda environment as MyEnv.
