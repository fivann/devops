The default number of inodes in an ext4 file system is based on the size of the file system and the block size used. 
The default number of inodes is typically calculated as one inode per every 16 kilobytes of disk space, or 1 inode per every 4 blocks.

For a 1 TB ext4 file system with a block size of 4 KB, the default number of inodes would be approximately 244 million. 
However, this value can vary depending on the specific file system configuration and any custom options used when creating the file system.

It's important to note that the default number of inodes may not be sufficient for certain workloads, 
such as systems with many small files or high turnover of files. In such cases, 
it may be necessary to increase the number of inodes when creating the file system to avoid running out of inodes in the future.

To format an ext4 1 TB drive with at least 1 billion inodes, you can specify the number of inodes you want to create when creating 
the file system using the mkfs.ext4 command. The number of inodes you need depends on the block size used by the file system.

Assuming you want to use a block size of 4 KB, you can use the following command to create the file system with 1 billion inodes:

>>> sudo mkfs.ext4 -N 1000000000 -b 4096 /dev/sdX

Replace "/dev/sdX" with the appropriate device name for your 1 TB drive. 
This command will create an ext4 file system with 1 billion inodes and a block size of 4 KB. 
Note that creating a file system with such a large number of inodes can increase the size of the inode table 
and the amount of disk space required to store it.

#############

To expand the filesystem on a Linux machine with a btrfs file system after increasing 
the size of the virtual drive by 1 TB, you can follow these steps:

Check the name of the device that contains the btrfs file system using the lsblk command:

$ sudo lsblk

Check the current size of the btrfs file system using the df command:

$ sudo df -hT /path/to/btrfs

Use the parted or fdisk command to expand the partition that contains the btrfs file system to use the additional 1 TB of space.

Use the resize2fs command to resize the btrfs file system to fill the expanded partition. 
For btrfs, you can use the btrfs filesystem resize command instead.

$ sudo btrfs filesystem resize max /path/to/btrfs

This command resizes the btrfs file system to use all available space on the partition.
Verify that the file system has been expanded by running the df command again:

$ sudo df -hT /path/to/btrfs

The output should show the new size of the btrfs file system.

