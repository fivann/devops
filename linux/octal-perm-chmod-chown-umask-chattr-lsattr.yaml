Permissions:
  - Description: File permissions in Unix-based operating systems
  - Modes:
      0: No permissions
      1: Execute only
      2: Write only
      3: Write and execute
      4: Read only
      5: Read and execute
      6: Read and write
      7: Read, write and execute
  - Special Modes:
      d: Directory
      l: Symbolic link
      s: SUID or SGID
      t: Sticky bit
  - Example:
      - File: -rw-r--r--  (owner has read/write, group and others have read-only)
        Octal Mode: 644
      - Directory: drwxr-xr-x (owner has read/write/execute, group and others have read/execute)
        Octal Mode: 755
      - File: -rwxrwx---  (owner and group have read/write/execute, others have no access)
        Octal Mode: 770
      - Directory: drwxrwsr-x (owner has read/write/execute, group has read/write/execute and SGID set, others have read/execute)
        Octal Mode: 2775
      - File: -rwSr-xr-x  (owner has read/write, group has read-only and SUID set, others have read/execute)
        Octal Mode: 4644
      - Directory: drwxrwxrwt (owner, group, and others have read/write/execute and sticky bit set)
        Octal Mode: 1777


chmod Cheat Sheet:
  - Description: A quick reference guide for using the chmod command to change file permissions
  - Syntax: chmod [options] mode file
  - Options:
      - -R: Recursively change permissions for files and directories within a directory
      - -f: Suppress error messages
      - -v: Verbose mode, display each file that is modified
  - Modes:
      - u: User (owner)
      - g: Group
      - o: Other (everyone else)
      - a: All (same as ugo)
      - +: Add permission
      - -: Remove permission
      - =: Set permission
      - r: Read
      - w: Write
      - x: Execute
  - Examples:
      - chmod u+x file.txt: Add execute permission for owner
      - chmod a=rw file.txt: Set read and write permissions for all
      - chmod g-w,o-rx file.txt: Remove write permission for group and read/execute permissions for others
      - chmod -R u=rwX,go=rX dir/: Set read and write permissions for owner and read/execute permissions for group and others for all files and directories within "dir/"

---

chown Cheat Sheet:
  - Description: A quick reference guide for using the chown command to change file ownership
  - Syntax: chown [options] [user][:group] file
  - Options:
      - -R: Recursively change ownership for files and directories within a directory
      - -f: Suppress error messages
      - -v: Verbose mode, display each file that is modified
  - User: The username or UID of the new owner
  - Group: The groupname or GID of the new group
  - Examples:
      - chown user1 file.txt: Change owner to "user1"
      - chown user1:group1 file.txt: Change owner to "user1" and group to "group1"
      - chown :group2 file.txt: Change group to "group2" and keep existing owner
      - chown -R user1:group1 dir/: Recursively change owner to "user1" and group to "group1" for all files and directories within "dir/"


---

chattr:
  description: A command that allows a user to set or remove attributes from a file or directory.
  commands:
    - chattr +i file.txt    # sets the immutable attribute to file.txt
    - chattr -i file.txt   # removes the immutable attribute from file.txt
    - chattr +a file.txt   # sets the append-only attribute to file.txt
    - chattr -a file.txt   # removes the append-only attribute from file.txt
    - chattr +u file.txt   # sets the undeletable attribute to file.txt
    - chattr -u file.txt   # removes the undeletable attribute from file.txt

lsattr:
  description: A command that lists the attributes of a file or directory.
  commands:
    - lsattr file.txt   # lists the attributes of file.txt


---
umask Cheat Sheet:
  - Description: A quick reference guide for using the umask command to set default file permissions
  - Syntax: umask [options] [mode]
  - Options:
      - -S: Display the umask value in symbolic notation
      - -p: Display the umask value in octal notation
  - Modes:
      - u: User (owner)
      - g: Group
      - o: Other (everyone else)
      - a: All (same as ugo)
      - +: Add permission
      - -: Remove permission
      - r: Read
      - w: Write
      - x: Execute
  - Examples:
      - umask 022: Set default permissions to rw-r--r--
      - umask u=rwx,g=,o=: Set default permissions to rwx------
      - umask a+w: Add write permission to default permissions for all
      - umask -S: Display the current umask value in symbolic notation

---

linux_permissions_on_links:
  definition: |
    "In Linux, hard links share the same inode as the target file, 
    meaning they have the same permissions and ownership. 
    However, symbolic links have their own set of permissions, 
    which refers to the permissions of the link itself and not the target file. 
    When accessing a symlink, the system checks the permissions on the target file, not the symlink."

steps:
  1_create_files_and_links:
    - command: "touch file1"
      description: "Create a sample file called 'file1'."
    - command: "ln file1 hardlink1"
      description: "Create a hard link 'hardlink1' pointing to 'file1'."
    - command: "ln -s file1 symlink1"
      description: "Create a symbolic link 'symlink1' pointing to 'file1'."

  2_view_permissions:
    - command: "ls -l"
      description: "View the permissions of the files and links."

  3_change_permissions:
    - command: "chmod 750 file1"
      description: "Change permissions on the target file 'file1' (This will affect hard links as well)."
    - command: "chmod 750 symlink1"
      description: |
        "Change permissions on the symbolic link 'symlink1' (Note: This will change the permissions on the target file, not the link itself)."

  4_verify_permissions:
    - command: "ls -l"
      description: "Verify the permissions of the files, hard links, and symbolic links after changing them."

pesudographics:
  permissions_on_links_process: |
    1. Create file1, hardlink1, and symlink1
    2. View permissions
    3. Change permissions
    4. Verify permissions

    file1 <-> hardlink1
    file1 -> symlink1

---
# SPECIAL BITS

Linux special bits:
  s: SUID or SGID
  t: Sticky bit
  
Explanation:
SUID (Set User ID) and SGID (Set Group ID) are special permission bits that can be set on executable files or directories. 
When an executable file with the SUID bit is run, it is executed with the permissions of the file owner instead of the 
user who is running it. Similarly, when an executable file with the SGID bit is run, it is executed with the group permissions 
of the group that owns the file.

The sticky bit is a permission bit that can be set on directories. When set, it prevents users from deleting or renaming files 
in that directory unless they are the owner of the file or the directory, or they have write permission on the directory.

Suitable Linux commands:
- To set SUID bit: 
    chmod u+s filename

- To set SGID bit: 
    chmod g+s filename

- To set sticky bit: 
    chmod +t directory_path

- To remove SUID bit: 
    chmod u-s filename

- To remove SGID bit: 
    chmod g-s filename

- To remove sticky bit: 
    chmod -t directory_path

---
# LAB

Working with Special Bits:
Introduction: 
  - It's important to manage special bits that can be set on files and directories.
  - This lab demonstrates how to manage them.

The Scenario:
  - We need to create a collaborative space for managers named Bob, Adam, and Sally on our server.
  - They are all members of the managers group.
  - We need to create a directory named "managers" in /opt owned by the managers group.
  - We also need to create a "scratch" directory within that with the same permissions as /tmp.
  - Additionally, we need to set up an executable named "suid" in /tmp to be owned by Bob and run with his permissions.

Logging In:
  - Use the provided credentials to log in as cloud_user.
  - Obtain root privileges using sudo -i.

Create the Collaborative Area:
  - Create the managers directory in /opt:
      - cd /opt
      - mkdir managers
  - Make sure the managers group owns the managers directory:
      - chown bob.managers managers/
  - Set all new files created in managers to be owned by the managers group:
      - chmod g+s managers
  - Grant write permissions to the managers group:
      - chmod g+w managers
  - Test:
      - cd managers
      - touch file
      - ls -l
  - Cleanup:
      - rm file

Create a Scratch Area, Similar to /tmp, Named scratch:
  - Create the scratch directory:
      - mkdir scratch
  - Check the permissions on /tmp:
      - ls -ld /tmp
  - Set the same permissions on scratch:
      - chmod o+t scratch
      - chmod a+w scratch

Configure the suid Executable:
  - Copy the executable to the current directory:
      - cp /tmp/suid .
  - Change the owner of the executable to Bob:
      - chown bob.managers suid
  - Set the setUID bit:
      - chmod u+s suid
  - Test:
      - ./suid
      - Check the effective UID using "id bob".

---
# LAB 2

Managing and Troubleshooting File Permissions:
  Introduction: |
    This lab covers most of the things that you need to know to navigate and troubleshoot a filesystem. 
    You will get a chance to practice working with octal permissions, setting ACLs, SELinux, special bits, 
    and file attributes to complete tasks that could happen in the real world.

  The Scenario: |
    Bob, Adam, and Sally are developers working on a website. 
    They need access to /var/www/html to manipulate files and directories. 
    They also need a scratch area at /var/www/devs, where all files should have the devs group ownership. 
    There is an index.html file in /var/www/devs that should be moved over to /var/www/html. 
    Your task is to complete these tasks while troubleshooting any issues that arise.

  Logging In: |
    Use the credentials provided on the hands-on lab overview page, and log in as cloud_user. 
    Once you're in, run `sudo -i` to get root privileges.

  Set up /var/www/html to Allow the devs Group Access: |
    First, get some baseline information by running `getfacl /var/www/html`.
    Since there are no ACLs set currently, set your own using `setfacl -m d:g:devs:rwx /var/www/html`, 
    and then check it by running `getfacl /var/www/html`.
    Now, anyone in the devs group can navigate to and write to /var/www/html.

  Fix Startup Errors for Apache: |
    If running `systemctl start httpd` gives errors, run `journalctl -xe` to see if there are any issues. 
    You might see lines similar to:
    Jan 09 20:32:46 Server1 httpd[7107]: (13)Permission denied: AH00091: httpd: could not open error log file /etc/httpd/l>
    Jan 09 20:32:46 Server1 httpd[7107]: AH00015: Unable to open logs
    The issue might be with the error log file, which is /var/log/httpd/error_log. 
    Check it using `ls -lZ /var/log/httpd/error_log`. If the context is wrong (e.g., admin_home instead of what it should be), 
    use `restorecon /var/log/httpd/error_log`, and then start the service with `systemctl start httpd`.

  Set up /var/www/devs Directory So That All Files Created Are Owned by the devs Group: |
    First, run `ls -ld /var/www/devs` to get information about the directory. Both the root user and group own it. 
    Give the group owner write permissions, and set devs as that group owner by running 
    `chmod g+w /var/www/devs` and `chown root.devs /var/www/devs`, respectively. 
    Set the sticky bit, so that any file created in there will be owned by the devs group, with `chmod g+s /var/www/devs`.
    Run a test by navigating to /var/www/devs, creating a file, and checking its ownership by running `ls -l`. 
    It should be owned by the devs group.

  Move /var/www/devs/index.html to /var/www/html and Ensure It's Served Correctly: |
    To move index.html, run `mv /var/www/devs/index.html /var/www/html`. 
    If this returns an "Operation not permitted" error, check the file attributes with `lsattr /var/www/devs/index.html`. 
    If it shows that the file has the immutable flag set, change it by running `


# ----------------------- 
# old version:


linux:
  - type: File Permissions
    privileges:
      - r: read permission
      - w: write permission
      - x: execute permission

  - type: File Modes
    modes:
      - -rw-r--r--: read and write for owner, read-only for group and others
      - -rwxr-xr-x: read, write, and execute for owner, read and execute for group and others
      - -rwxrwxrwx: read, write, and execute for all users

  - type: Directory Permissions
    privileges:
      - r: list contents of directory
      - w: add, remove, and rename files and directories in directory
      - x: access contents of directory and execute files within directory

  - type: Special Permissions
    privileges:
      - s: setuid/setgid bit
      - t: sticky bit
      - +: additional permissions

  - type: Setuid/Setgid Bit
    meaning: Runs executable with privileges of the owner/group, not the user running it
    example:
      - -rwsr-xr-x: setuid bit set, executable is run with owner privileges
      - -rwxr-sr-x: setgid bit set, executable is run with group privileges

  - type: Sticky Bit
    meaning: Prevents users from deleting or renaming files they do not own
    example:
      - drwxrwxrwt: sticky bit set, only owner can delete or rename files in directory
      - drwxr-xr-x: sticky bit not set, any user can delete or rename files in directory

  - type: Chmod Syntax
    syntax:
      - Numeric:
          - 0: no permissions
          - 1: execute only
          - 2: write only
          - 3: write and execute
          - 4: read only
          - 5: read and execute
          - 6: read and write
          - 7: read, write, and execute
        example: "chmod 755 file.txt"
      - Symbolic:
          - u: user/owner
          - g: group
          - o: others
          - a: all
          - +: add permission
          - -: remove permission
          - =: set permission
        example: "chmod u+x file.txt"

---

- name: Using Octal Permissions to Set up a Collaboration Area
  description: |
    In a multi-user environment like Linux, there will come a need to have a specific area set aside for different uses to collaborate. 
    This lab will walk through the process and make sure you understand how different permissions can work together.
  steps:
  - name: Log in as cloud_user
    command: |
      ssh cloud_user@server_ip_address
  - name: Change ownership of /opt/collab directory to bob.managers
    command: |
      sudo chown bob.managers /opt/collab
  - name: Set permissions to 770 on /opt/collab directory
    command: |
      sudo chmod 770 /opt/collab
  - name: Become bob and touch a file in /opt/collab
    command: |
      sudo su - bob -c 'touch /opt/collab/bob'
  - name: Become adam and touch a file in /opt/collab
    command: |
      sudo su - adam -c 'touch /opt/collab/adam'
  - name: Become sally and touch a file in /opt/collab
    command: |
      sudo su - sally -c 'touch /opt/collab/sally'
  - name: Edit adam's umask to 0002 in ~/.bash_profile
    command: |
      sudo su - adam -c 'vim ~/.bash_profile'
      # Delete the line that says umask 066
      # Save and exit the file
  - name: Delete and recreate the adam file in /opt/collab
    command: |
      sudo su - adam -c 'rm /opt/collab/adam'
      sudo su - adam -c 'touch /opt/collab/adam'
  - name: Verify all managers can read all files in /opt/collab
    command: |
      sudo su - bob -c 'cat /opt/collab/*'
      sudo su - adam -c 'cat /opt/collab/*'
      sudo su - sally -c 'cat /opt/collab/*'
