ext2:
- Introduced in 1993 as the default filesystem for Linux.
- Supports up to 2 terabytes of disk space.
- Does not support journaling, which means that filesystem checks are required after unexpected shutdowns.
- Uses a traditional block-based allocation scheme.

ext3:
- Introduced in 2001 as an extension of ext2 with journaling support.
- Supports up to 32 terabytes of disk space.
- Journaling helps improve recovery after unexpected shutdowns.
- Uses a traditional block-based allocation scheme.

ext4:
- Introduced in 2008 as an extension of ext3 with improved performance and scalability.
- Supports up to 1 exabyte of disk space.
- Supports extents, which reduces fragmentation and improves performance.
- Supports delayed allocation, which improves performance by delaying allocation of blocks until they are actually needed.

XFS:
- Introduced in 1994 by Silicon Graphics for their IRIX operating system.
- Supports up to 8 exabytes of disk space.
- Uses a more advanced extent-based allocation scheme that reduces fragmentation and improves performance.
- Supports journaling for improved recovery after unexpected shutdowns.

Btrfs:
- Introduced in 2009 as a new filesystem for Linux with advanced features.
- Supports up to 16 exabytes of disk space.
- Uses a copy-on-write (CoW) allocation scheme that allows for snapshots and other advanced features.
- Supports transparent compression and encryption.

ZFS:
- Developed by Sun Microsystems for their Solaris operating system.
- Supports up to 256 quadrillion zettabytes of disk space.
- Uses a combined file system and volume manager that provides advanced features such as snapshots, data compression, and data deduplication.
- Supports transactional copy-on-write allocation that provides strong data consistency guarantees.

---

- command: xfs_info
  description: Display information about an XFS file system
  syntax:
    - xfs_info [options] <device or mount point>
  options:
    - option: -h
      description: Show help information and exit
    - option: -V
      description: Print version information and exit
  examples:
    - example: xfs_info /dev/sda1
      description: Display information about the XFS file system on the /dev/sda1 device

- command: xfs_repair
  description: Repair an XFS file system
  syntax:
    - xfs_repair [options] <device or mount point>
  options:
    - option: -n
      description: Dry-run mode (don't actually make any changes)
    - option: -v
      description: Verbose mode (display detailed information)
    - option: -L
      description: Force log zeroing during repair
    - option: -P
      description: Partial repair (do not traverse unallocated blocks)
    - option: -m
      description: Use metadata log for repair
    - option: -t
      description: Use transaction log for repair
    - option: -L
      description: Use log device for repair
    - option: -h
      description: Show help information and exit
    - option: -V
      description: Print version information and exit
  examples:
    - example: xfs_repair /dev/sda1
      description: Repair the XFS file system on the /dev/sda1 device
    - example: xfs_repair -n /dev/sda1
      description: Run a dry-run repair of the XFS file system on the /dev/sda1 device without actually making any changes

---

xfsdump:
  Basic_usage: "xfsdump [options] mount_point"
  Common_options:
    -l: "Specify dump level (0-9)"
    -L: "Specify dump label"
    -M: "Specify dump media label"
    -f: "Specify dump destination"
    -I: "Specify inventory file"
    -F: "Force dump, ignoring some warnings"
    -J: "Display progress bar"
    -R: "Retry failed tape positioning"
    -j: "Compress data using specified compression level (0-9)"
    -p: "Specify number of concurrent streams"
    -t: "Specify time in seconds between progress reports"
    -T: "Specify start time for incremental dumps"
    -V: "Display version information and exit"
    -z: "Specify compression level (0-9)"
  Examples:
    Full_backup_to_file:
      Command: "xfsdump -l 0 -L 'Full Backup' -f /backups/full_backup.xfsdump /mnt/data"
    Incremental_backup_to_file:
      Command: "xfsdump -l 1 -L 'Incremental Backup' -T '2023-03-18 00:00:00' -f /backups/incremental_backup.xfsdump /mnt/data"

xfsrestore:
  Basic_usage: "xfsrestore [options] mount_point"
  Common_options:
    -f: "Specify restore source"
    -I: "Specify inventory file"
    -A: "Attempt to restore extended attributes"
    -F: "Force restore, ignoring some warnings"
    -i: "Interactive restore, prompting before overwriting"
    -L: "Restore specified dump label"
    -m: "Restore specified dump media label"
    -N: "Perform a dry-run restore"
    -p: "Specify number of concurrent streams"
    -r: "Resume an interrupted restore"
    -R: "Retry failed tape positioning"
    -S: "Skip specified number of records"
    -t: "Specify time in seconds between progress reports"
    -V: "Display version information and exit"
    -x: "Restore metadata only"
    -j: "Decompress data using specified decompression level (0-9)"
    -z: "Specify decompression level (0-9)"
  Examples:
    Full_restore_from_file:
      Command: "xfsrestore -f /backups/full_backup.xfsdump /mnt/data_restored"
    Interactive_restore_from_file:
      Command: "xfsrestore -i -f /backups/incremental_backup.xfsdump /mnt/data_restored"
    Metadata_only_restore_from_file:
      Command: "xfsrestore -x -f /backups/full_backup.xfsdump /mnt/data_restored"

