Permissions:
  - Description: File permissions in Unix-based operating systems
  - Modes:
      0: No permissions
      1: Execute only
      2: Write only
      3: Write and execute
      4: Read only
      5: Read and execute
      6: Read and write
      7: Read, write and execute
  - Special Modes:
      d: Directory
      l: Symbolic link
      s: SUID or SGID
      t: Sticky bit
  - Example:
      - File: -rw-r--r--  (owner has read/write, group and others have read-only)
        Octal Mode: 644
      - Directory: drwxr-xr-x (owner has read/write/execute, group and others have read/execute)
        Octal Mode: 755
      - File: -rwxrwx---  (owner and group have read/write/execute, others have no access)
        Octal Mode: 770
      - Directory: drwxrwsr-x (owner has read/write/execute, group has read/write/execute and SGID set, others have read/execute)
        Octal Mode: 2775
      - File: -rwSr-xr-x  (owner has read/write, group has read-only and SUID set, others have read/execute)
        Octal Mode: 4644
      - Directory: drwxrwxrwt (owner, group, and others have read/write/execute and sticky bit set)
        Octal Mode: 1777


chmod Cheat Sheet:
  - Description: A quick reference guide for using the chmod command to change file permissions
  - Syntax: chmod [options] mode file
  - Options:
      - -R: Recursively change permissions for files and directories within a directory
      - -f: Suppress error messages
      - -v: Verbose mode, display each file that is modified
  - Modes:
      - u: User (owner)
      - g: Group
      - o: Other (everyone else)
      - a: All (same as ugo)
      - +: Add permission
      - -: Remove permission
      - =: Set permission
      - r: Read
      - w: Write
      - x: Execute
  - Examples:
      - chmod u+x file.txt: Add execute permission for owner
      - chmod a=rw file.txt: Set read and write permissions for all
      - chmod g-w,o-rx file.txt: Remove write permission for group and read/execute permissions for others
      - chmod -R u=rwX,go=rX dir/: Set read and write permissions for owner and read/execute permissions for group and others for all files and directories within "dir/"

---

chown Cheat Sheet:
  - Description: A quick reference guide for using the chown command to change file ownership
  - Syntax: chown [options] [user][:group] file
  - Options:
      - -R: Recursively change ownership for files and directories within a directory
      - -f: Suppress error messages
      - -v: Verbose mode, display each file that is modified
  - User: The username or UID of the new owner
  - Group: The groupname or GID of the new group
  - Examples:
      - chown user1 file.txt: Change owner to "user1"
      - chown user1:group1 file.txt: Change owner to "user1" and group to "group1"
      - chown :group2 file.txt: Change group to "group2" and keep existing owner
      - chown -R user1:group1 dir/: Recursively change owner to "user1" and group to "group1" for all files and directories within "dir/"


---


umask Cheat Sheet:
  - Description: A quick reference guide for using the umask command to set default file permissions
  - Syntax: umask [options] [mode]
  - Options:
      - -S: Display the umask value in symbolic notation
      - -p: Display the umask value in octal notation
  - Modes:
      - u: User (owner)
      - g: Group
      - o: Other (everyone else)
      - a: All (same as ugo)
      - +: Add permission
      - -: Remove permission
      - r: Read
      - w: Write
      - x: Execute
  - Examples:
      - umask 022: Set default permissions to rw-r--r--
      - umask u=rwx,g=,o=: Set default permissions to rwx------
      - umask a+w: Add write permission to default permissions for all
      - umask -S: Display the current umask value in symbolic notation

---

linux_permissions_on_links:
  definition: |
    "In Linux, hard links share the same inode as the target file, 
    meaning they have the same permissions and ownership. 
    However, symbolic links have their own set of permissions, 
    which refers to the permissions of the link itself and not the target file. 
    When accessing a symlink, the system checks the permissions on the target file, not the symlink."

steps:
  1_create_files_and_links:
    - command: "touch file1"
      description: "Create a sample file called 'file1'."
    - command: "ln file1 hardlink1"
      description: "Create a hard link 'hardlink1' pointing to 'file1'."
    - command: "ln -s file1 symlink1"
      description: "Create a symbolic link 'symlink1' pointing to 'file1'."

  2_view_permissions:
    - command: "ls -l"
      description: "View the permissions of the files and links."

  3_change_permissions:
    - command: "chmod 750 file1"
      description: "Change permissions on the target file 'file1' (This will affect hard links as well)."
    - command: "chmod 750 symlink1"
      description: "Change permissions on the symbolic link 'symlink1' (Note: This will change the permissions on the target file, not the link itself)."

  4_verify_permissions:
    - command: "ls -l"
      description: "Verify the permissions of the files, hard links, and symbolic links after changing them."

pesudographics:
  permissions_on_links_process: |
    1. Create file1, hardlink1, and symlink1
    2. View permissions
    3. Change permissions
    4. Verify permissions

    file1 <-> hardlink1
    file1 -> symlink1



# ----------------------- 
# old version:


linux:
  - type: File Permissions
    privileges:
      - r: read permission
      - w: write permission
      - x: execute permission

  - type: File Modes
    modes:
      - -rw-r--r--: read and write for owner, read-only for group and others
      - -rwxr-xr-x: read, write, and execute for owner, read and execute for group and others
      - -rwxrwxrwx: read, write, and execute for all users

  - type: Directory Permissions
    privileges:
      - r: list contents of directory
      - w: add, remove, and rename files and directories in directory
      - x: access contents of directory and execute files within directory

  - type: Special Permissions
    privileges:
      - s: setuid/setgid bit
      - t: sticky bit
      - +: additional permissions

  - type: Setuid/Setgid Bit
    meaning: Runs executable with privileges of the owner/group, not the user running it
    example:
      - -rwsr-xr-x: setuid bit set, executable is run with owner privileges
      - -rwxr-sr-x: setgid bit set, executable is run with group privileges

  - type: Sticky Bit
    meaning: Prevents users from deleting or renaming files they do not own
    example:
      - drwxrwxrwt: sticky bit set, only owner can delete or rename files in directory
      - drwxr-xr-x: sticky bit not set, any user can delete or rename files in directory

  - type: Chmod Syntax
    syntax:
      - Numeric:
          - 0: no permissions
          - 1: execute only
          - 2: write only
          - 3: write and execute
          - 4: read only
          - 5: read and execute
          - 6: read and write
          - 7: read, write, and execute
        example: "chmod 755 file.txt"
      - Symbolic:
          - u: user/owner
          - g: group
          - o: others
          - a: all
          - +: add permission
          - -: remove permission
          - =: set permission
        example: "chmod u+x file.txt"

